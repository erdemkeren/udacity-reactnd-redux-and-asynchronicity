{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","retrieveUsersSucceed","items","type","retrieveUsersFailed","defaultState","loading","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","state","arguments","length","undefined","action","Object","objectSpread","applyMiddleware","ReduxThunk","ConnectedApp","connect","_ref2","dispatch","retrieveUsers","axios","get","then","response","data","results","map","item","key","login","uuid","catch","e","_ref","React","useEffect","react_default","a","createElement","card","title","spin","table","dataSource","columns","dataIndex","ReactDOM","render","react_redux_es","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2PAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECKAC,EAAuB,SAAAC,GAAK,MAAK,CACnCC,KAF2B,yBAG3BD,UAIEE,EAAsB,iBAAO,CAC/BD,KAF0B,0BAKxBE,EAAe,CACjBH,MAAO,GACPI,SAAS,GAgBPC,EAAmBV,OAAOW,sCAAwCC,IAClEC,EAAQC,YAdE,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBR,EAAcW,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC9C,OAAQC,EAAOb,MACX,IA9BqB,uBA+BjB,OAAOc,OAAAC,EAAA,EAAAD,CAAA,GAAKL,EAAZ,CAAmBN,SAAS,IAChC,IApBuB,yBAqBnB,OAAOW,OAAAC,EAAA,EAAAD,CAAA,GAAKL,EAAZ,CAAmBV,MAAOc,EAAOd,MAAOI,SAAS,IACrD,IAhBsB,wBAiBlB,OAAOW,OAAAC,EAAA,EAAAD,CAAA,GAAKL,EAAZ,CAAmBN,SAAS,IAChC,QACI,OAAOM,IAKgBL,EAC/BY,YAAgBC,OA8BdC,EAAeC,YATR,SAAAC,GAAA,MAAyB,CAClCrB,MADSqB,EAAGrB,MAEZI,QAFSiB,EAAUjB,UAKV,SAAAkB,GAAQ,MAAK,CACtBC,cAAe,SAAAvB,GAAK,OAAIsB,EAjEA,SAAAA,GACxBA,EAL8B,CAC9BrB,KAFyB,yBAOzBuB,IAAMC,IAAI,yCACLC,KAAK,SAAAC,GAAQ,OAAIL,EAASvB,EAAqB4B,EAASC,KAAKC,QAAQC,IAAI,SAAAC,GAAI,OAAAhB,OAAAC,EAAA,EAAAD,CAAA,GAAUgB,EAAV,CAAgBC,IAAKD,EAAKE,MAAMC,aAC7GC,MAAM,SAAAC,GAAC,OAAId,EAASpB,YAgERkB,CA3BT,SAAAiB,GAAuC,IAApCjC,EAAoCiC,EAApCjC,QAASJ,EAA2BqC,EAA3BrC,MAAOuB,EAAoBc,EAApBd,cAC3Be,IAAMC,UAAU,kBAAMhB,KAAiB,CAACxB,IAUxC,OACIyC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAM,SACPxC,EAAUoC,EAAAC,EAAAC,cAACG,EAAA,EAAD,MAAWL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAOC,WAAY/C,EAAOgD,QAVxC,CAAC,CACbJ,MAAO,aACPK,UAAW,cACZ,CACCL,MAAO,YACPK,UAAW,cAK2D7C,QAASA,OAgBvF8C,IAASC,OACLX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAU5C,MAAOA,GACbgC,EAAAC,EAAAC,cAACvB,EAAD,OAENkC,SAASC,eAAe,SDwCpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.04c50b2b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport axios from 'axios';\nimport 'antd/dist/antd.css';\nimport ReactDOM from 'react-dom';\nimport ReduxThunk from 'redux-thunk';\nimport { Card, Table, Spin } from 'antd';\nimport { connect, Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, applyMiddleware, compose} from 'redux';\n\nconst RETRIEVE_USERS_START = 'RETRIEVE_USERS_START'\nconst retrieveUsersStart = () => ({\n    type: RETRIEVE_USERS_START,\n})\n\nconst retrieveUsers = () => dispatch => {\n    dispatch(retrieveUsersStart())\n    axios.get(\"https://randomuser.me/api/?results=50\")\n        .then(response => dispatch(retrieveUsersSucceed(response.data.results.map(item => ({ ...item, key: item.login.uuid })))))\n        .catch(e => dispatch(retrieveUsersFailed()))\n}\n\nconst RETRIEVE_USERS_SUCCEED = 'RETRIEVE_USERS_SUCCEED'\nconst retrieveUsersSucceed = items => ({\n    type: RETRIEVE_USERS_SUCCEED,\n    items\n})\n\nconst RETRIEVE_USERS_FAILED = 'RETRIEVE_USERS_FAILED'\nconst retrieveUsersFailed = () => ({\n    type: RETRIEVE_USERS_FAILED,\n})\n\nconst defaultState = {\n    items: [],\n    loading: false,\n}\n\nconst reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case RETRIEVE_USERS_START:\n            return { ...state, loading: true }\n        case RETRIEVE_USERS_SUCCEED:\n            return { ...state, items: action.items, loading: false }\n        case RETRIEVE_USERS_FAILED:\n            return { ...state, loading: false }\n        default:\n            return state\n    }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, composeEnhancers(\n    applyMiddleware(ReduxThunk)\n));\n\nconst App = ({ loading, items, retrieveUsers }) => {\n    React.useEffect(() => retrieveUsers(), [retrieveUsersSucceed])\n\n    const columns = [{\n        title: 'First Name',\n        dataIndex: 'name.first',\n    }, {\n        title: 'Last Name',\n        dataIndex: 'name.last',\n    }]\n\n    return (\n        <Card title=\"Users\">\n            {loading ? <Spin /> : <Table dataSource={items} columns={columns} loading={loading} />}\n        </Card>\n    )\n}\n\nconst mSTP = ({ items, loading }) => ({\n    items,\n    loading\n})\n\nconst mDTP = dispatch => ({\n    retrieveUsers: items => dispatch(retrieveUsers())\n})\n\nconst ConnectedApp = connect(mSTP, mDTP)(App)\n\nReactDOM.render(\n    <Provider store={store}>\n        <ConnectedApp/>\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}